{"version":3,"file":"static/js/900.7b8d5cb0.chunk.js","mappings":"kNACA,GAAgB,KAAO,mBAAmB,KAAO,mBAAmB,MAAQ,oBAAoB,QAAU,uB,2BCgE1G,MAzDA,YAA4B,IAAZA,EAAW,EAAXA,QACd,GAAwBC,EAAAA,EAAAA,UAAS,QAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAyBA,OArBAC,EAAAA,EAAAA,YAAU,WACJJ,EAAKA,KACPC,EAAQ,KAGVA,EAAQ,IACRF,EAAQ,YACRM,EAAAA,EAAAA,GAAS,QAAST,EAAQU,MAAM,GAAI,GAAI,WACrCC,MAAK,SAAAC,GACAA,IACFP,EAAQO,GACRT,EAAQ,gBAGXU,OAAM,SAAAC,GACLP,EAASO,GACTX,EAAQ,kBAGX,KAGD,UAAC,EAAAY,SAAD,WACY,YAATb,IAAsB,SAACc,EAAA,EAAD,IACb,SAATd,IAAmB,iCACV,aAATA,IAAuB,mBAAQe,UAAWC,EAAAA,OAAnB,SAA8BZ,EAAMa,UAClD,aAATjB,IACC,eAAIe,UAAWC,EAAAA,KAAf,SACGd,EAAKA,MAAQA,EAAKA,KAAKgB,KAAI,SAAAR,GAAE,OAC5B,gBAAqBK,UAAWC,EAAAA,KAAhC,UACGN,EAAGS,cACF,gBAAKJ,UAAWC,EAAAA,SAAYI,IAjC1B,kCAiCyCV,EAAGS,aAAcE,IAAKX,EAAGY,KAAMC,QAAQ,UAElF,gBAAKR,UAAWC,EAAAA,QAAhB,uBAGF,eAAID,UAAWC,EAAAA,MAAf,SAAyBN,EAAGY,SAPrBZ,EAAGc","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__-ZWZl\",\"item\":\"Cast_item__fph6y\",\"title\":\"Cast_title__j7QfX\",\"noImage\":\"Cast_noImage__5Qols\"};","import fetchApi from '../../AppService';\r\nimport { useEffect, useState } from 'react/cjs/react.development';\r\nimport s from './Cast.module.css'\r\nimport Loader from '../Loader/Loader';\r\nimport propTypes from 'prop-types';\r\nimport { Fragment } from 'react/cjs/react.production.min';\r\n\r\n\r\nfunction Cast({ modieId }) {\r\n  const [view, setView] = useState('idle')\r\n  const [cast, setCast] = useState({})\r\n  const [error, setError] = useState(null)\r\n\r\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\r\n\r\n  useEffect(() => {\r\n    if (cast.cast) {\r\n      setCast({})\r\n      return\r\n    }\r\n    setCast({})\r\n    setView('pending')\r\n    fetchApi('movie', modieId.slice(3), '', 'credits')\r\n      .then(el => {\r\n        if (el) {\r\n          setCast(el)\r\n          setView('resolved')\r\n        }\r\n      })\r\n      .catch(errorRejected => {\r\n        setError(errorRejected);\r\n        setView('rejected')\r\n      }\r\n      )\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      {view === 'pending' && <Loader />}\r\n      {view === 'idle' && <div>...</div>}\r\n      {view === 'rejected' && <strong className={s.strong}>{error.message}</strong>}\r\n      {view === 'resolved' && (\r\n        <ul className={s.list}>\r\n          {cast.cast && cast.cast.map(el =>\r\n            <li key={el.cast_id} className={s.item}>\r\n              {el.profile_path ? (\r\n                <img className={s.portrait} src={IMG_URL + el.profile_path} alt={el.name} loading=\"lazy\" />\r\n              ) : (\r\n                <div className={s.noImage}>No photo</div>\r\n              )\r\n              }\r\n              <h3 className={s.title}>{el.name}</h3>\r\n            </li>\r\n          )}\r\n        </ul>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nCast.propTypes = {\r\n  modieId: propTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Cast"],"names":["modieId","useState","view","setView","cast","setCast","error","setError","useEffect","fetchApi","slice","then","el","catch","errorRejected","Fragment","Loader","className","s","message","map","profile_path","src","alt","name","loading","cast_id"],"sourceRoot":""}